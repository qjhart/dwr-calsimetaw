* README

Cal-SIMETAW is the code developed to create the historical record of
California weather; Tmin, Tmax, and PCP from PRISM data.  It also
creates a historical record of weather parameters from the Spatial
CIMIS dataset, Tn, Tx, Tdew, U2, Rs, Rso.

** Processing

*** PRISM

In 2010, the DWR CalSIMETAW dataset was first developed. At that time, PRISM
data was only available at a monthly timestep. To create daily estimates, the
monthly data was perturbed by spine fits to NCDC daily station data, to estimate
daily variation.

In 2014, and error was discovered in the methodology used to correct for daily
precipitation in the early decades, causing for an overestimate in the
precipation for those years. This data was corrected and redistributed in
November 2014.

Subsequent to the original processing, PRISM data is also available for download
at daily increments. Because of this, since 2010, the data is provided by the
daily prism data.

** Overview

 + Daily estimates of ET and Precipitation
 + Gridded on the Standard DWR grid
 + Available from 1921 through the present day

** Installation

The current setup uses a docker implementation.  The docker
implementation, saves the PRISM data to the GDB file.

** Steps

*** Download the prism data

Since 2010 PRISM has supplied daily data for processing.  One issue
with this data is that they maintain a 6 month period where the data
is identified as _provisional_.  Sometimes, we don't like to wait, and
so we use some of the provisional data is input for the CIMIS data.

What data to try and download is determined by the location that you
are currently using.  Schema _prism-stable_ retrieves stable data
while _prism-provisional_ retrieves provisonal data.

Either way the process is the same, we use the prism/daily.mk script
to fetch that data.  You need to be executing in grass for this to
work.

#+BEGIN_SRC bash
  me=quinn
  alias water-dc='CURRENT_UID=$(id -u):$(id -g) docker-compose -p water -f ~/dwr-calsimetaw/eto.yml'
  water-dc exec grass grass -c /data/prism-stable/${me}

#+END_SRC

#+BEGIN_SRC bash
start=2020-01-01
for d in `seq 0 364`; do
  m=`date --date="$start + $d days" +%Y%m%d`;
  g.mapset -c $m;
  make -f daily.mk tmin tmax ppt;
done
#+END_SRC


*** Reproject to CIMIS

There currently is no makefile to do this.  We just do that by
scripting, which is a bit dumb but there you are.  In the
ca-daily-prism code, you use the following.  Note that the make script
runs the calsimetaw method for ET.

#+begin_src bash
# Now move to the prism-daily location
g.mapset location=ca-prism-daily mapset=${me}
# Let's say we have the first 212 days in stable, but the rest are provisional
d=365
for d in `seq 0 $d`; do
 date=`date --date="${start} + $d days" +%Y%m%d`;
 g.mapset -c $date; g.region rast=state@4km;
 for r in tmin tmax ppt; do
   r.proj input=$r location=prism-stable;
 done;
 make -f /dwr-calsimetaw/daily.mk
done
# Now the provisional data
for d in `seq $d 364`; do
 date=`date --date="2013-01-01 + $d days" +%Y%m%d`;
 g.mapset -c $date; g.region rast=state@4km;
 for r in tmin tmax ppt; do
   r.proj input=$r location=prism-provisional;
 done;
 make -f /dwr-calsimetaw/2003-present/daily.mk
done
#+end_src

** Create TIF Files

#+begin_src bash
for s in `seq 0 365`; do
 d=$(date --date="2014-10-01 + $s days" +%Y%m%d);
 iso=$(date --date="2014-10-01 + $s days" --iso);
 g.mapset $d;
 i.group group=ee input=ETo,ppt,tmax,tmin,ETh,srha,Ra;
 start=$(date --date="$d" +%s000); end=$(date --date="$d + 24hours" +%s000);
 r.out.gdal input=ee output=$iso.tif type=Float32;
done
  #+end_src


* Actual Runs


** 2023-04-25 / 2023-05-16

   Morrie wants the complete CIMIS data.  Currently we only gave DWR up until
   sometime in October.

   The first step is to get a CSV file of all the data for the year 2022.  We
   need to run this on cimis-goes-s.cstars.ucdavis.edu, the production server.
   The steps are presumably in [[*2022-11-09][2022-11-09]] . Looking at my home directory, there
   it looks like I did this back in 2023-01-05.

   Now, the PRISM data needs to be in the database, so that we can get the
   precipitation from that data, I noticed this before at [[*2023-01-26][2023-01-26]].  I can see
   from my data on this machine, that I must have forgotten to copy over the new
   cimis_2022.csv file with all the data beyond, october.

   When I ran this on 2023-04-25, I discovered that some data was missing: Well
   shoot, I can see that we have 5 days missing from our data, 2022-08-01,
   2022-08-15, 2022-09-02, 2022-10-04, 2022-12-13

   George reported these fixed on 2023-05-16

      Remember, this is run in a docker environment.
   #+begin_src bash
     alias water-dc='CURRENT_UID=$(id -u):$(id -g) docker compose -p water'
     water-dc up -d
   #+end_src



   #+begin_src bash
     rsync quinn@cimis-goes-s.cstars.ucdavis.edu:cimis_2022.csv.gz . -v
   #+end_src

   Ok, now I have all the cimis data.  I've copied the eto.yml file to the
   docker-compose file, but we
   Let's make sure the prism data is there:

   #+BEGIN_SRC bash
   docker compose -p water exec -u postgres db psql -c "select year,count(*) from prism.year group by year;" eto
   #+END_SRC

   #+RESULTS:
   | year           |      |   | count |
   | ------+------- |      |   |       |
   | 2022           |      |   | 26295 |
   | (1             | row) |   |       |
   |                |      |   |       |


   #+BEGIN_SRC bash
    docker compose -p water exec -u postgres db psql -c "select cimis.add_year(2022,'/csv/cimis_2022.csv');" eto
    docker compose -p water exec -u postgres db psql -c "select cimis.out_year('/csv/cimis_2022',2022);" eto
   #+END_SRC


** 2023-04-14

   Morrie wants new data for 2022.  I'll get as much PRISM data as possible, and
   then add whatever is needed.

   Remember, this is run in a docker environment.
   #+begin_src bash
     alias water-dc='CURRENT_UID=$(id -u):$(id -g) docker compose -p water -f ~/dwr-calsimetaw/eto.yml'
     water-dc up -d
   #+end_src

#+BEGIN_SRC bash
  # You are running in your container.
  #water-dc exec grass grass /data/prism-stable/quinn
  g.mapset mapset=quinn location=prism-stable
  start='2022-04-01'
  end='2022-12-31'
  let d=`date --date=$end +%-j`-`date --date=$start +%-j`
  for d in `seq 0 $d`; do
      date=`date --date="$start + $d days" +%Y%m%d`;
      g.mapset -c $date; make -f daily.mk tmin tmax ppt;
  done
  # From 2022/10/01 on provisional, and the above failed, so remove those dirs

  rm -rf /data/prism-stable/20221???

  # And re-run w/ provisional data
  g.mapset mapset=quinn location=prism-provisional
  start='2022-10-01'
  end='2022-12-31'
  let d=`date --date=$end +%-j`-`date --date=$start +%-j`
  for d in `seq 0 $d`; do
      date=`date --date="$start + $d days" +%Y%m%d`;
      g.mapset -c $date; make -f /data/daily.mk tmin tmax ppt;
  done


  # Now move to the prism-daily location
  g.mapset location=ca-prism-daily mapset=quinn

  for p in prism-stable prism-provisional; do
      start='2022-04-01'
      end='2022-12-31'
      let d=`date --date=$end +%-j`-`date --date=$start +%-j`

      for d in `seq 0 $d`; do
          date=`date --date="$start + $d days" +%Y%m%d`;
          g.mapset -c $date; g.region rast=state@4km;
          for r in tmin tmax ppt; do
              r.proj --overwrite input=$r location=$p;
          done;
          make -f /dwr-calsimetaw/daily.mk
      done
  done
   #+end_src


   OK, now we have all the data available in grass, we need to convert to CSV
   files.

   #+BEGIN_SRC bash
year=2022
g.region rast=state@4km
r.mask -r
r.mask state@4km
declare -a vars=('tmin' 'tmax' 'ppt' 'ETo' 'rf')
printf -v head "%s," "${vars[@]}"
head="date,x,y,${head%?}"    # Remove the final character of head

echo $head
for m in $(g.mapsets -l separator=newline | grep ^${year}.... ); do
    printf -v dvars "%s@${m}," "${vars[@]}";
    dvars=${dvars%?};
    r.out.xyz --q separator=',' input=$dvars output=- | perl -p -e "s/^/$m,/";
done > prism_${year}.csv
#+END_SRC

   And now with that in the csv directory, we can run this script

  #+BEGIN_SRC bash
     alias water-dc='CURRENT_UID=$(id -u):$(id -g) docker compose -p water -f ~/dwr-calsimetaw/eto.yml'
     water-dc exec -u postgres db psql -c "select prism.add_year(2022,'/csv/prism_2022.csv');" eto
     water-dc exec -u postgres db psql -c "select prism.out_year('/csv/prism_2022',2022);" eto
#+END_SRC


** 2023-01-26

   It was noted that since I had removed the prism data before creating the
   CIMIS data, I didn't actually have any precipitation data for the cimis
   pixels, so I needed to rerun those, while the prism data was in the database.
   Fortunately, I still had the csv data, so the following worked.

   #+BEGIN_SRC bash
     alias water-dc='CURRENT_UID=$(id -u):$(id -g) docker compose -p water -f ~/dwr-calsimetaw/eto.yml'
     water-dc exec -u postgres db psql -c "select prism.add_year(2021,'/csv/prism_2021.csv');" eto
     water-dc exec -u postgres db psql -c "select prism.add_year(2022,'/csv/prism_2022.csv');" eto
     water-dc exec -u postgres db psql -c "select cimis.add_year(2021,'/csv/cimis_2021.csv');" eto
     water-dc exec -u postgres db psql -c "select cimis.add_year(2022,'/csv/cimis_2022.csv');" eto
     water-dc exec -u postgres db psql -c "select cimis.out_year('/csv/cimis_2021',2021);" eto
     water-dc exec -u postgres db psql -c "select cimis.out_year('/csv/cimis_2022',2022);" eto
#+END_SRC

The zipfiles have been updated at: https://drive.google.com/drive/folders/0B1PbgjOWShULMm9ZbUlQb2N4RGc?resourcekey=0-OQH5ZIfIH-8NBui53oWa4g&usp=share_link


** 2022-11-09


*** CIMIS Data

    This code is run on cimis-goes-s.cstars.ucdavis.edu, running under grass w/

    #+begin_example
    GRASS 7.4.0 (cimis):~ > g.gisenv
 GOES_SOURCE=17
 GISDBASE=/home/cimis/gdb
 LOCATION_NAME=cimis
 ET_URL=https://et.water.ca.gov/api
 GUI=text
 PID=21396
 CG_ZIPCODE_DB=/home/quinn/cimis_zip.db
 ET_APPKEY=4560e8dd-c61a-45d7-bd4f-2cd3e7afaeb7
 MAPSET=quinn
    #+end_example

    #+begin_src bash
      g.region rast=state@4km
      r.mask -r
      r.mask state@4km
      declare -a vars=('Tn' 'Tx' 'day_dew_pnt_ns' 'U2' 'ETo' 'K' 'Rnl' 'Rs')
      printf -v head "%s," "${vars[@]}"
      head="date,x,y,${head%?}"    # Remove the final character of head

      for year in 2022; do
          for m in $(g.mapsets -l separator=newline | grep "^${year}....$" ); do
              echo $m;
              printf -v dvars "%s@${m}," "${vars[@]}";
              dvars=${dvars%?};
              r.out.xyz --q separator=',' input=$dvars | perl -p -e "s/^/$m,/" >> ~/cimis_${year}.csv;
          done
      done
    #+end_src

    Then, we copy those CSV files to where we are doing the processing.  And add
    them into our setup with the following commands:

    #+BEGIN_SRC bash
      alias water-dc='CURRENT_UID=$(id -u):$(id -g) docker compose -p water -f ~/dwr-calsimetaw/eto.yml'
      water-dc exec -u postgres db psql -c "select cimis.add_year(2021,'/csv/cimis_2021.csv');" eto
      water-dc exec -u postgres db mkdir /csv/cimis_2021
      water-dc exec -u postgres db psql -c "select cimis.out_year('/csv/cimis_2021',2021);" eto

      water-dc exec -u postgres db psql -c "select cimis.add_year(2022,'/csv/cimis_2022.csv');" eto
      water-dc exec -u postgres db mkdir /csv/cimis_2022
      water-dc exec -u postgres db psql -c "select cimis.out_year('/csv/cimis_2022',2022);" eto

 #+END_SRC



** 2021-10-29

   Update Prism for stable data.

#+BEGIN_SRC bash
    #./eto.yml exec grass grass /data/prism-stable/quinn
    g.mapset mapset=quinn location=prism-stable
    start=2020-12-01
    for d in `seq 0 31`; do m=`date --date="$start + $d days" +%Y%m%d`; g.mapset -c $m; make -n -f daily.mk tmin tmax ppt; done
    # Now move to the prism-daily location
    g.mapset location=ca-prism-daily mapset=quinn

    # Only stable
    for p in prism-stable; do
    start=`2020-11-01`
    end=`2020-12-31`
    let d=`date --date=$end +%j`-`date --date=$start +%j`

    for d in `seq 0 $d`; do
     date=`date --date="$start + $d days" +%Y%m%d`;
     g.mapset -c $date; g.region rast=state@4km;
     for r in tmin tmax ppt; do
       r.proj input=$r location=$p;
     done;
     make -f /dwr-calsimetaw/daily.mk
    done
  done

#+END_SRC

And then a new PRISM csv file.

#+BEGIN_SRC bash
year=2020
g.region rast=state@4km
r.mask -r
r.mask state@4km
declare -a vars=('tmin' 'tmax' 'ppt' 'ETo' 'rf')
printf -v head "%s," "${vars[@]}"
head="date,x,y,${head%?}"    # Remove the final character of head

echo $head
for m in $(g.mapsets -l separator=newline | grep ^${year}.... ); do
    printf -v dvars "%s@${m}," "${vars[@]}";
    dvars=${dvars%?};
    r.out.xyz --q separator=',' input=$dvars output=- | perl -p -e "s/^/$m,/";
done > prism_${year}.csv
#+END_SRC

Then we need to create the prism data using postgres.

#+BEGIN_SRC bash
psql service=eto -c "select prism.add_year(2020,'/csv/prism_2020.csv')"
psql service=eto -c "select prism.out_year(2020,'/csv/prism_2020')"

#+END_SRC



** 2021-06-23

#+BEGIN_SRC bash

g.mapset mapset=quinn location=stable
start=2020-01-01
for d in `seq 0 364`; do m=`date --date="$start + $d days" +%Y%m%d`; g.mapset -c $m; make -n -f daily.mk tmin tmax ppt; done
g.mapset mapset=quinn location=prism-provisional
start=2020-12-01
for d in `seq 0 30`; do m=`date --date="$start + $d days" +%Y%m%d`; g.mapset -c $m; make -f daily.mk tmin tmax ppt; done
# Now move to the prism-daily location
g.mapset location=ca-prism-daily mapset=quinn


# Let's say we have the first 212 days in stable, but the rest are provisional
for p in prism-stable prism-provisional; do
  start=`cd /data/$p; ls -d 2020* | head -1`
  end=`cd /data/$p; ls -d 2020* | tail -1`
  let d=`date --date=$end +%j`-`date --date=$start +%j`

  for d in `seq 0 $d`; do
   date=`date --date="$start + $d days" +%Y%m%d`;
   g.mapset -c $date; g.region rast=state@4km;
   for r in tmin tmax ppt; do
     r.proj input=$r location=$p;
   done;
   make -f /dwr-calsimetaw/daily.mk
  done
done

#+END_SRC

And now create the CIMIS csv file

#+BEGIN_SRC bash
year=2020
g.region rast=state@4km
g.mask -r
r.mask state@4km
declare -a vars=('tmin' 'tmax' 'ppt' 'ETo' 'rf')
printf -v head "%s," "${vars[@]}"
head="date,x,y,${head%?}"    # Remove the final character of head

echo $head
for m in $(g.mapsets -l separator=newline | grep ^${year}.... ); do
    printf -v dvars "%s@${m}," "${vars[@]}";
    dvars=${dvars%?};
    r.out.xyz --q separator=',' input=$dvars output=- | perl -p -e "s/^/$m,/";
done > prism_${year}.csv
#+END_SRC


* Contact

Quinn Hart <qjhart@ucdavis.edu>
