* README

Cal-SIMETAW is the code developed to create the historical record of
California weather; Tmin, Tmax, and PCP from PRISM data.  It also
creates a historical record of weather parameters from the Spatial
CIMIS dataset, Tn, Tx, Tdew, U2, Rs, Rso.

** Processing

*** PRISM

In 2010, the DWR CalSIMETAW dataset was first developed. At that time, PRISM
data was only available at a monthly timestep. To create daily estimates, the
monthly data was perturbed by spine fits to NCDC daily station data, to estimate
daily variation.

In 2014, and error was discovered in the methodology used to correct for daily
precipitation in the early decades, causing for an overestimate in the
precipation for those years. This data was corrected and redistributed in
November 2014.

Subsequent to the original processing, PRISM data is also available for download
at daily increments. Because of this, since 2010, the data is provided by the
daily prism data.

** Overview

 + Daily estimates of ET and Precipitation
 + Gridded on the Standard DWR grid
 + Available from 1921 through the present day

** Installation

The current setup uses a docker implementation.  The docker
implementation, saves the PRISM data to the GDB file.


** Steps

*** Download the prism data

Since 2010 PRISM has supplied daily data for processing.  One issue
with this data is that they maintain a 6 month period where the data
is identified as _provisional_.  Sometimes, we don't like to wait, and
so we use some of the provisional data is input for the CIMIS data.

What data to try and download is determined by the location that you
are currently using.  Schema _prism-stable_ retrieves stable data
while _prism-provisional_ retrieves provisonal data.

Either way the process is the same, we use the prism/daily.mk script
to fetch that data.  You need to be executing in grass for this to
work.

#+BEGIN_SRC bash
  me=quinn
  alias water-dc='CURRENT_UID=$(id -u):$(id -g) docker-compose -p water -f ~/dwr-calsimetaw/eto.yml'
  water-dc exec grass grass -c /data/prism-stable/${me}

#+END_SRC

#+BEGIN_SRC bash
start=2020-01-01
for d in `seq 0 364`; do
  m=`date --date="$start + $d days" +%Y%m%d`;
  g.mapset -c $m;
  make -f daily.mk tmin tmax ppt;
done
#+END_SRC


*** Reproject to CIMIS

There currently is no makefile to do this.  We just do that by
scripting, which is a bit dumb but there you are.  In the
ca-daily-prism code, you use the following.  Note that the make script
runs the calsimetaw method for ET.

#+begin_src bash
# Now move to the prism-daily location
g.mapset location=ca-prism-daily mapset=${me}
# Let's say we have the first 212 days in stable, but the rest are provisional
d=365
for d in `seq 0 $d`; do
 date=`date --date="${start} + $d days" +%Y%m%d`;
 g.mapset -c $date; g.region rast=state@4km;
 for r in tmin tmax ppt; do
   r.proj input=$r location=prism-stable;
 done;
 make -f /dwr-calsimetaw/daily.mk
done
# Now the provisional data
for d in `seq $d 364`; do
 date=`date --date="2013-01-01 + $d days" +%Y%m%d`;
 g.mapset -c $date; g.region rast=state@4km;
 for r in tmin tmax ppt; do
   r.proj input=$r location=prism-provisional;
 done;
 make -f /dwr-calsimetaw/2003-present/daily.mk
done
#+end_src


*** Create the required input files

** Create Postgres ready data

** Output the CalSimetaw data

#+BEGIN_SRC bash
psql service=eto -c "select prism.add_year(2020,'/csv/prism_2020.csv')"
psql service=eto -c "select prism.out_year(2020,'/csv/prism_2020')"

#+END_SRC

*** CIMIS Data

The CIMIS data is arranged in a much different methodology, but the way of
extractin the data into postgres database, and from there into the CalSIMETAW
data is very similar.


#+BEGIN_SRC bash
year=2020
g.region rast=state@2km
g.region res=4000
g.mask -r
r.mask state@2km
declare -a vars=('Tn' 'Tx' 'Tdew' 'U2' 'ETo' 'K' 'Rnl' 'Rs')
printf -v head "%s," "${vars[@]}"
head="date,x,y,${head%?}"    # Remove the final character of head

#echo $head > cimis_${year}.csv;


for m in $(g.mapsets -l separator=newline | grep "^${year}....$" | head);do
  echo $m
  printf -v dvars "%s@${m}," "${vars[@]}";
  dvars=${dvars%?};
  r.out.xyz --q separator=',' input=$dvars | perl -p -e "s/^/$m,/" >> ~/cimis_${year}.csv;
done

#+END_SRC



** Create TIF Files

#+begin_src bash
for s in `seq 0 365`; do
 d=$(date --date="2014-10-01 + $s days" +%Y%m%d);
 iso=$(date --date="2014-10-01 + $s days" --iso);
 g.mapset $d;
 i.group group=ee input=ETo,ppt,tmax,tmin,ETh,srha,Ra;
 start=$(date --date="$d" +%s000); end=$(date --date="$d + 24hours" +%s000);
 r.out.gdal input=ee output=$iso.tif type=Float32;
done
  #+end_src


* Actual Runs

** 2021-06-23

#+BEGIN_SRC bash

g.mapset mapset=quinn location=stable
start=2020-01-01
for d in `seq 0 364`; do m=`date --date="$start + $d days" +%Y%m%d`; g.mapset -c $m; make -n -f daily.mk tmin tmax ppt; done
g.mapset mapset=quinn location=prism-provisional
start=2020-12-01
for d in `seq 0 30`; do m=`date --date="$start + $d days" +%Y%m%d`; g.mapset -c $m; make -f daily.mk tmin tmax ppt; done
# Now move to the prism-daily location
g.mapset location=ca-prism-daily mapset=quinn


# Let's say we have the first 212 days in stable, but the rest are provisional
for p in prism-stable prism-provisional; do
  start=`cd /data/$p; ls -d 2020* | head -1`
  end=`cd /data/$p; ls -d 2020* | tail -1`
  let d=`date --date=$end +%j`-`date --date=$start +%j`

  for d in `seq 0 $d`; do
   date=`date --date="$start + $d days" +%Y%m%d`;
   g.mapset -c $date; g.region rast=state@4km;
   for r in tmin tmax ppt; do
     r.proj input=$r location=$p;
   done;
   make -f /dwr-calsimetaw/daily.mk
  done
done

#+END_SRC

#+BEGIN_SRC bash
year=2020
g.region rast=state@4km
g.mask -r
r.mask state@4km
declare -a vars=('tmin' 'tmax' 'ppt' 'ETo' 'rf')
printf -v head "%s," "${vars[@]}"
head="date,x,y,${head%?}"    # Remove the final character of head

echo $head
for m in $(g.mapsets -l separator=newline | grep ^${year}.... ); do
    printf -v dvars "%s@${m}," "${vars[@]}";
    dvars=${dvars%?};
    r.out.xyz --q separator=',' input=$dvars output=- | perl -p -e "s/^/$m,/";
done > prism_${year}.csv
#+END_SRC


* Contact

Quinn Hart <qjhart@ucdavis.edu>
